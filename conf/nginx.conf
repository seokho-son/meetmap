# Nginx Configuration for MeetMap Application
#
# SETUP INSTRUCTIONS:
#
# 1. PREREQUISITES:
#    - Nginx must be installed on your system (https://nginx.org/en/download.html)
#    - SSL certificate and key need to be 
#    - MeetMap Flask application running locally on port 80 (127.0.0.1:80)
#
# 2. CONFIGURATION:
#    - Copy this file to your nginx/conf directory or include it in your main nginx.conf
#    - Modify the server_name directive to match your domain or IP address
#    - Update SSL certificate paths to your actual certificate locations
#    - Check log paths and make sure they're accessible by Nginx
#
#    Example configurations:
#    
#    For IP-based setup (e.g., 192.168.1.100):
#      server_name 192.168.1.100;
#    For domain-based setup (e.g., map.example.com):
#      server_name map.example.com;
#    For both IP and domain:
#      server_name map.example.com 192.168.1.100;
#      ssl_certificate      C:/nginx/certs/server.crt;
#      ssl_certificate_key  C:/nginx/certs/server.key;
#
# 3. ESSENTIAL NGINX COMMANDS (Windows for instance):
#    - Start Nginx: start nginx (or nginx)
#    - Test configuration: nginx -t
#    - Reload configuration: nginx -s reload
#    - Graceful shutdown: nginx -s quit (waits for worker processes to finish serving requests)
#    - Immediate shutdown: nginx -s stop (terminates immediately, may interrupt connections)
#    - Check running processes: tasklist | findstr nginx
#
# 4. SSL CERTIFICATE:
#    - For production: Obtain certificates from a trusted CA
#    - For testing: Generate self-signed certificates using OpenSSL
#      openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout server.key -out server.crt
#    - Place certificates in an accessible location and update paths in this config
#
# 5. CUSTOMIZATION:
#    - Adjust worker_processes based on number of CPU cores 
#    - Modify buffer sizes and timeouts if needed
#    - Add more domains/IPs to server_name as needed
#


# Basic worker configuration - adjust based on CPU cores
worker_processes auto;  # Automatically use available cores

# Log configuration - make sure log directory exists
error_log  logs/error.log;

# Process ID file
pid        logs/nginx.pid;

# Event handling settings
events {
   worker_connections 1024;  # Suitable for low to medium traffic
}

http {
   # Include MIME types definitions
   include mime.types;
   default_type application/octet-stream;
   
   # Log format definition
   log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

   access_log logs/access.log main;

   # Basic performance settings
   sendfile on;
   tcp_nopush on;
   
   # Connection timeout
   keepalive_timeout 65;
   
   # Enable compression for better performance
   gzip on;
   gzip_types text/plain text/css application/json application/javascript;
   
   # HTTP Server - Redirects HTTP to HTTPS
   server {
       listen 80;
       # CUSTOMIZE: Replace with your domain name or IP address
       server_name map.etri.re.kr 129.254.175.177;
       
       # Permanent redirect to HTTPS
       return 301 https://$host$request_uri;
       
       # Error page configuration
       error_page 500 502 503 504 /50x.html;
       location = /50x.html {
           root html;
       }
   }
   
   # HTTPS Server
   server {
       listen 443 ssl;
       # CUSTOMIZE: Replace with your domain name or IP address
       server_name map.etri.re.kr 129.254.175.177;
       
       # CUSTOMIZE: Update paths to your actual certificate files
        ssl_certificate      C:/nginx/certs/server.crt;
        ssl_certificate_key  C:/nginx/certs/server.key;
       
       # Standard SSL settings
       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;
       ssl_protocols        TLSv1.2 TLSv1.3;
       ssl_ciphers          HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers on;
       
       # Proxy configuration for MeetMap Flask application
       location / {
           # Proxy requests to the Flask application running on port 80
           proxy_pass http://127.0.0.1:80;
           
           # Forward important headers to the backend
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header X-Forwarded-Proto $scheme;
       }
       
       # Error page configuration
       error_page 500 502 503 504 /50x.html;
       location = /50x.html {
           root html;
       }
   }
}